const { spawn } = require("child_process")
const path = require("path")

console.log("üöÄ Starting KanbanTask services...")
console.log("üìÖ Started at:", new Date().toISOString())

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const NODE_ENV = process.env.NODE_ENV || "development"
const FRONTEND_PORT = process.env.FRONTEND_PORT || 3000
const BACKEND_PORT = process.env.PORT || 5000

console.log(`üåç Environment: ${NODE_ENV}`)
console.log(`üîó Frontend will run on port: ${FRONTEND_PORT}`)
console.log(`üîó Backend will run on port: ${BACKEND_PORT}`)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
const logWithPrefix = (prefix, data) => {
  const timestamp = new Date().toISOString()
  const message = data.toString().trim()
  if (message) {
    console.log(`[${timestamp}] [${prefix}] ${message}`)
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms))

// –ó–∞–ø—É—Å–∫ backend —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è MongoDB
const startBackend = async () => {
  console.log("‚è≥ Waiting for MongoDB to be ready...")
  await sleep(10000) // –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è MongoDB

  console.log("üîß Starting backend server...")
  const backend = spawn("node", ["backend/server.js"], {
    stdio: ["pipe", "pipe", "pipe"],
    env: {
      ...process.env,
      NODE_ENV: NODE_ENV,
      PORT: BACKEND_PORT,
    },
  })

  backend.stdout.on("data", (data) => {
    logWithPrefix("BACKEND", data)
  })

  backend.stderr.on("data", (data) => {
    logWithPrefix("BACKEND-ERR", data)
  })

  backend.on("exit", (code, signal) => {
    console.log(`‚ùå Backend process exited with code ${code} and signal ${signal}`)
    if (code !== 0) {
      process.exit(code || 1)
    }
  })

  backend.on("error", (error) => {
    console.error("‚ùå Backend process error:", error)
    process.exit(1)
  })

  return backend
}

// –ó–∞–ø—É—Å–∫ frontend —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è backend
const startFrontend = async () => {
  console.log("‚è≥ Waiting for backend to be ready...")
  await sleep(15000) // –ñ–¥–µ–º 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è backend

  console.log("üé® Starting frontend server...")
  const frontend = spawn("npm", ["start"], {
    cwd: path.join(__dirname, "frontend"),
    stdio: ["pipe", "pipe", "pipe"],
    env: {
      ...process.env,
      NODE_ENV: NODE_ENV,
      PORT: FRONTEND_PORT,
    },
  })

  frontend.stdout.on("data", (data) => {
    logWithPrefix("FRONTEND", data)
  })

  frontend.stderr.on("data", (data) => {
    logWithPrefix("FRONTEND-ERR", data)
  })

  frontend.on("exit", (code, signal) => {
    console.log(`‚ùå Frontend process exited with code ${code} and signal ${signal}`)
    if (code !== 0) {
      process.exit(code || 1)
    }
  })

  frontend.on("error", (error) => {
    console.error("‚ùå Frontend process error:", error)
    process.exit(1)
  })

  return frontend
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
let backend, frontend

const startServices = async () => {
  try {
    backend = await startBackend()
    frontend = await startFrontend()

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    setTimeout(() => {
      console.log("‚úÖ Both services should be running now!")
      console.log(`üåê Frontend: http://localhost:${FRONTEND_PORT}`)
      console.log(`üîå Backend API: http://localhost:${BACKEND_PORT}`)
      console.log(`üè• Health Check: http://localhost:${BACKEND_PORT}/api/health`)
    }, 5000)
  } catch (error) {
    console.error("‚ùå Error starting services:", error)
    process.exit(1)
  }
}

// Graceful shutdown
const shutdown = (signal) => {
  console.log(`üì¥ Received ${signal}, shutting down gracefully...`)

  if (backend) backend.kill("SIGTERM")
  if (frontend) frontend.kill("SIGTERM")

  setTimeout(() => {
    console.log("‚è∞ Force killing processes...")
    if (backend) backend.kill("SIGKILL")
    if (frontend) frontend.kill("SIGKILL")
    process.exit(0)
  }, 10000)
}

process.on("SIGTERM", () => shutdown("SIGTERM"))
process.on("SIGINT", () => shutdown("SIGINT"))

// –ó–∞–ø—É—Å–∫
startServices()
