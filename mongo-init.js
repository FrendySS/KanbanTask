// MongoDB initialization script –¥–ª—è Docker
print("üîß Initializing MongoDB for KanbanTask...")

// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö kanbantask
const db = db.getSiblingDB("kanbantask")

// –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏
print("üìä Creating collections and indexes...")

// Users collection
db.createCollection("users")
db.users.createIndex({ email: 1 }, { unique: true })
print("‚úÖ Users collection created")

// Boards collection
db.createCollection("boards")
db.boards.createIndex({ owner: 1 })
db.boards.createIndex({ "members.user": 1 })
print("‚úÖ Boards collection created")

// Columns collection
db.createCollection("columns")
db.columns.createIndex({ boardId: 1, order: 1 })
print("‚úÖ Columns collection created")

// Tasks collection
db.createCollection("tasks")
db.tasks.createIndex({ columnId: 1, order: 1 })
db.tasks.createIndex({ boardId: 1 })
db.tasks.createIndex({ assignedTo: 1 })
db.tasks.createIndex({ dueDate: 1 })
print("‚úÖ Tasks collection created")

// Comments collection
db.createCollection("comments")
db.comments.createIndex({ taskId: 1, createdAt: -1 })
print("‚úÖ Comments collection created")

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
print("üë§ Creating test user...")

const bcrypt = require("bcryptjs")
const testUserPassword = bcrypt.hashSync("123456", 12)

db.users.insertOne({
  name: "Test User",
  email: "test@example.com",
  passwordHash: testUserPassword,
  isActive: true,
  createdAt: new Date(),
  updatedAt: new Date(),
})

print("‚úÖ Test user created (email: test@example.com, password: 123456)")

print("üéâ MongoDB initialization completed successfully!")
