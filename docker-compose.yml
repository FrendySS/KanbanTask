services:
  # MongoDB сервис
  mongodb:
    image: mongo:7.0
    container_name: kanbantask-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: kanbantask
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - kanbantask-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Основное приложение (Frontend + Backend)
  app:
    build: 
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: kanbantask-app
    restart: unless-stopped
    environment:
      # Server Configuration
      NODE_ENV: production
      PORT: 5000
      
      # Database
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/kanbantask?authSource=admin
      
      # JWT Configuration
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production-2024
      JWT_EXPIRES_IN: 7d
      
      # URLs
      FRONTEND_URL: http://localhost:3000
      NEXT_PUBLIC_BACKEND_URL: http://localhost:5000
      NEXT_PUBLIC_API_URL: http://localhost:5000/api
      
      # File Upload
      UPLOAD_PATH: /app/uploads
      MAX_FILE_SIZE: 5242880
    ports:
      - "3000:3000"  # Frontend
      - "5000:5000"  # Backend API
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - kanbantask-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx для production (опционально)
  nginx:
    image: nginx:alpine
    container_name: kanbantask-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - kanbantask-network
    profiles:
      - production

# Именованные тома для персистентности данных
volumes:
  mongodb_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local

# Сеть для связи между контейнерами
networks:
  kanbantask-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
