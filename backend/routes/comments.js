const express = require("express")
const { body, validationResult } = require("express-validator")
const Comment = require("../models/Comment")
const Task = require("../models/Task")
const Board = require("../models/Board")
const auth = require("../middleware/auth")

const router = express.Router()

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–¥–∞—á–µ
router.get("/task/:taskId", auth, async (req, res) => {
  try {
    const { taskId } = req.params

    console.log("üìù Getting comments for task:", taskId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –¥–æ—Å—Ç—É–ø
    const task = await Task.findById(taskId)
    if (!task) {
      return res.status(404).json({ message: "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" })
    }

    const board = await Board.findById(task.boardId)
    const hasAccess =
      board.owner.toString() === req.user._id.toString() ||
      board.members.some((member) => member.user._id.toString() === req.user._id.toString())

    if (!hasAccess) {
      return res.status(403).json({ message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ" })
    }

    const comments = await Comment.find({ taskId }).populate("author", "name email").sort({ createdAt: 1 })

    console.log("‚úÖ Comments found:", comments.length)
    res.json(comments)
  } catch (error) {
    console.error("Get comments error:", error)
    res.status(500).json({
      message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
      error: error.message,
    })
  }
})

// –°–æ–∑–¥–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
router.post(
  "/",
  auth,
  [
    body("taskId").isMongoId().withMessage("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏"),
    body("text").trim().isLength({ min: 1, max: 1000 }).withMessage("–¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)"),
  ],
  async (req, res) => {
    try {
      const errors = validationResult(req)
      if (!errors.isEmpty()) {
        return res.status(400).json({
          message: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
          errors: errors.array(),
        })
      }

      const { taskId, text } = req.body

      console.log("üìù Creating comment for task:", taskId, "by user:", req.user._id)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –¥–æ—Å—Ç—É–ø
      const task = await Task.findById(taskId)
      if (!task) {
        return res.status(404).json({ message: "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" })
      }

      const board = await Board.findById(task.boardId)
      const hasAccess =
        board.owner.toString() === req.user._id.toString() ||
        board.members.some((member) => member.user._id.toString() === req.user._id.toString())

      if (!hasAccess) {
        return res.status(403).json({ message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ" })
      }

      const comment = new Comment({
        taskId,
        author: req.user._id,
        text,
      })

      await comment.save()
      console.log("‚úÖ Comment created:", comment._id)

      const populatedComment = await Comment.findById(comment._id).populate("author", "name email")

      res.status(201).json({
        message: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
        comment: populatedComment,
      })
    } catch (error) {
      console.error("Create comment error:", error)
      res.status(500).json({
        message: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è",
        error: error.message,
      })
    }
  },
)

// –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
router.put(
  "/:id",
  auth,
  [body("text").trim().isLength({ min: 1, max: 1000 }).withMessage("–¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)")],
  async (req, res) => {
    try {
      const errors = validationResult(req)
      if (!errors.isEmpty()) {
        return res.status(400).json({
          message: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
          errors: errors.array(),
        })
      }

      const comment = await Comment.findById(req.params.id)
      if (!comment) {
        return res.status(404).json({ message: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω" })
      }

      // –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
      if (comment.author.toString() !== req.user._id.toString()) {
        return res.status(403).json({ message: "–ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏" })
      }

      const { text } = req.body

      comment.text = text
      comment.isEdited = true
      comment.editedAt = new Date()

      await comment.save()

      const populatedComment = await Comment.findById(comment._id).populate("author", "name email")

      res.json({
        message: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
        comment: populatedComment,
      })
    } catch (error) {
      console.error("Update comment error:", error)
      res.status(500).json({
        message: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è",
        error: error.message,
      })
    }
  },
)

// –£–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
router.delete("/:id", auth, async (req, res) => {
  try {
    const comment = await Comment.findById(req.params.id)
    if (!comment) {
      return res.status(404).json({ message: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω" })
    }

    // –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    if (comment.author.toString() !== req.user._id.toString()) {
      return res.status(403).json({ message: "–ú–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏" })
    }

    await Comment.findByIdAndDelete(req.params.id)

    res.json({ message: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω" })
  } catch (error) {
    console.error("Delete comment error:", error)
    res.status(500).json({
      message: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è",
      error: error.message,
    })
  }
})

module.exports = router
