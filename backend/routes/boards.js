const express = require("express")
const { body, validationResult } = require("express-validator")
const Board = require("../models/Board")
const Column = require("../models/Column")
const Task = require("../models/Task")
const User = require("../models/User")
const auth = require("../middleware/auth")

const router = express.Router()

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∏ –≥–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫)
router.get("/", auth, async (req, res) => {
  try {
    const boards = await Board.find({
      $or: [{ owner: req.user._id }, { "members.user": req.user._id }],
    })
      .populate("owner", "name email")
      .populate("members.user", "name email")
      .sort({ updatedAt: -1 })

    res.json(boards)
  } catch (error) {
    console.error("Get boards error:", error)
    res.status(500).json({
      message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å–æ–∫",
      error: error.message,
    })
  }
})

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–æ—Å–∫—É —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏
router.get("/:id", auth, async (req, res) => {
  try {
    const board = await Board.findById(req.params.id)
      .populate("owner", "name email")
      .populate("members.user", "name email")

    if (!board) {
      return res.status(404).json({ message: "–î–æ—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    const hasAccess =
      board.owner._id.toString() === req.user._id.toString() ||
      board.members.some((member) => member.user._id.toString() === req.user._id.toString())

    if (!hasAccess) {
      return res.status(403).json({ message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –¥–æ—Å–∫–µ" })
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –∑–∞–¥–∞—á–∞–º–∏
    const columns = await Column.find({ boardId: board._id }).sort({ order: 1 })

    const columnsWithTasks = await Promise.all(
      columns.map(async (column) => {
        const tasks = await Task.find({ columnId: column._id })
          .populate("assignedTo", "name email")
          .populate("createdBy", "name email")
          .sort({ order: 1 })

        return {
          ...column.toObject(),
          tasks,
        }
      }),
    )

    res.json({
      ...board.toObject(),
      columns: columnsWithTasks,
    })
  } catch (error) {
    console.error("Get board error:", error)
    res.status(500).json({
      message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å–∫–∏",
      error: error.message,
    })
  }
})

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –¥–æ—Å–∫—É
router.post(
  "/",
  auth,
  [body("title").trim().isLength({ min: 1, max: 100 }).withMessage("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤)")],
  async (req, res) => {
    try {
      const errors = validationResult(req)
      if (!errors.isEmpty()) {
        return res.status(400).json({
          message: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
          errors: errors.array(),
        })
      }

      const { title, description } = req.body

      // –°–æ–∑–¥–∞–µ–º –¥–æ—Å–∫—É
      const board = new Board({
        title,
        description,
        owner: req.user._id,
        members: [
          {
            user: req.user._id,
            role: "admin",
          },
        ],
      })

      await board.save()

      // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
      const defaultColumns = [
        { title: "–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é", order: 0 },
        { title: "–í –ø—Ä–æ—Ü–µ—Å—Å–µ", order: 1 },
        { title: "–í—ã–ø–æ–ª–Ω–µ–Ω–æ", order: 2 },
      ]

      const columns = await Promise.all(
        defaultColumns.map(async (col) => {
          const column = new Column({
            title: col.title,
            boardId: board._id,
            order: col.order,
          })
          return await column.save()
        }),
      )

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –¥–æ—Å–∫—É —Å –ø–æ–ø—É–ª—è—Ü–∏–µ–π
      const populatedBoard = await Board.findById(board._id)
        .populate("owner", "name email")
        .populate("members.user", "name email")

      res.status(201).json({
        message: "–î–æ—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
        board: {
          ...populatedBoard.toObject(),
          columns: columns.map((col) => ({ ...col.toObject(), tasks: [] })),
        },
      })
    } catch (error) {
      console.error("Create board error:", error)
      res.status(500).json({
        message: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏",
        error: error.message,
      })
    }
  },
)

// –û–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å–∫—É
router.put(
  "/:id",
  auth,
  [
    body("title").optional().trim().isLength({ min: 1, max: 100 }).withMessage("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏ –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤"),
    body("description").optional().trim().isLength({ max: 500 }).withMessage("–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤"),
  ],
  async (req, res) => {
    try {
      const errors = validationResult(req)
      if (!errors.isEmpty()) {
        return res.status(400).json({
          message: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
          errors: errors.array(),
        })
      }

      const board = await Board.findById(req.params.id)

      if (!board) {
        return res.status(404).json({ message: "–î–æ—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" })
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ –∞–¥–º–∏–Ω)
      const isOwner = board.owner.toString() === req.user._id.toString()
      const isAdmin = board.members.some(
        (member) => member.user.toString() === req.user._id.toString() && member.role === "admin",
      )

      if (!isOwner && !isAdmin) {
        return res.status(403).json({ message: "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å–∫–∏" })
      }

      const { title, description, backgroundColor } = req.body
      const updates = {}

      if (title) updates.title = title
      if (description !== undefined) updates.description = description
      if (backgroundColor) updates.backgroundColor = backgroundColor

      const updatedBoard = await Board.findByIdAndUpdate(req.params.id, updates, { new: true })
        .populate("owner", "name email")
        .populate("members.user", "name email")

      res.json({
        message: "–î–æ—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
        board: updatedBoard,
      })
    } catch (error) {
      console.error("Update board error:", error)
      res.status(500).json({
        message: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å–∫–∏",
        error: error.message,
      })
    }
  },
)

// –£–¥–∞–ª–∏—Ç—å –¥–æ—Å–∫—É
router.delete("/:id", auth, async (req, res) => {
  try {
    const board = await Board.findById(req.params.id)

    if (!board) {
      return res.status(404).json({ message: "–î–æ—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" })
    }

    // –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –¥–æ—Å–∫—É
    if (board.owner.toString() !== req.user._id.toString()) {
      return res.status(403).json({ message: "–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –¥–æ—Å–∫—É" })
    }

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await Task.deleteMany({ boardId: board._id })
    await Column.deleteMany({ boardId: board._id })
    await Board.findByIdAndDelete(req.params.id)

    console.log(`üóëÔ∏è Board ${board.title} deleted by user ${req.user._id}`)
    res.json({ message: "–î–æ—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞" })
  } catch (error) {
    console.error("Delete board error:", error)
    res.status(500).json({
      message: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å–∫–∏",
      error: error.message,
    })
  }
})

// –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫ –¥–æ—Å–∫–µ
router.post("/:id/members", auth, async (req, res) => {
  try {
    const { email, role = "member" } = req.body
    const board = await Board.findById(req.params.id)

    if (!board) {
      return res.status(404).json({ message: "–î–æ—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    const isOwner = board.owner.toString() === req.user._id.toString()
    const isAdmin = board.members.some(
      (member) => member.user.toString() === req.user._id.toString() && member.role === "admin",
    )

    if (!isOwner && !isAdmin) {
      return res.status(403).json({ message: "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" })
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    const userToAdd = await User.findOne({ email })

    if (!userToAdd) {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    const isAlreadyMember = board.members.some((member) => member.user.toString() === userToAdd._id.toString())

    if (isAlreadyMember) {
      return res.status(400).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –¥–æ—Å–∫–∏" })
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    board.members.push({
      user: userToAdd._id,
      role,
    })

    await board.save()

    const updatedBoard = await Board.findById(board._id)
      .populate("owner", "name email")
      .populate("members.user", "name email")

    res.json({
      message: "–£—á–∞—Å—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω",
      board: updatedBoard,
    })
  } catch (error) {
    console.error("Add member error:", error)
    res.status(500).json({
      message: "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞",
      error: error.message,
    })
  }
})

// –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –¥–æ—Å–∫–∏
router.delete("/:id/members/:userId", auth, async (req, res) => {
  try {
    const { id: boardId, userId } = req.params
    const board = await Board.findById(boardId)

    if (!board) {
      return res.status(404).json({ message: "–î–æ—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ –∞–¥–º–∏–Ω)
    const isOwner = board.owner.toString() === req.user._id.toString()
    const isAdmin = board.members.some(
      (member) => member.user.toString() === req.user._id.toString() && member.role === "admin",
    )

    if (!isOwner && !isAdmin) {
      return res.status(403).json({ message: "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" })
    }

    // –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if (board.owner.toString() === userId) {
      return res.status(400).json({ message: "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–æ—Å–∫–∏" })
    }

    // –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    board.members = board.members.filter((member) => member.user.toString() !== userId)
    await board.save()

    const updatedBoard = await Board.findById(board._id)
      .populate("owner", "name email")
      .populate("members.user", "name email")

    res.json({
      message: "–£—á–∞—Å—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
      board: updatedBoard,
    })
  } catch (error) {
    console.error("Remove member error:", error)
    res.status(500).json({
      message: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞",
      error: error.message,
    })
  }
})

// –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
router.put("/:id/members/:userId", auth, async (req, res) => {
  try {
    const { id: boardId, userId } = req.params
    const { role } = req.body
    const board = await Board.findById(boardId)

    if (!board) {
      return res.status(404).json({ message: "–î–æ—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" })
    }

    // –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ä–æ–ª–∏
    if (board.owner.toString() !== req.user._id.toString()) {
      return res.status(403).json({ message: "–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" })
    }

    // –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if (board.owner.toString() === userId) {
      return res.status(400).json({ message: "–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–æ—Å–∫–∏" })
    }

    // –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const memberIndex = board.members.findIndex((member) => member.user.toString() === userId)
    if (memberIndex === -1) {
      return res.status(404).json({ message: "–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" })
    }

    board.members[memberIndex].role = role
    await board.save()

    const updatedBoard = await Board.findById(board._id)
      .populate("owner", "name email")
      .populate("members.user", "name email")

    res.json({
      message: "–†–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞",
      board: updatedBoard,
    })
  } catch (error) {
    console.error("Update member role error:", error)
    res.status(500).json({
      message: "–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞",
      error: error.message,
    })
  }
})

module.exports = router
