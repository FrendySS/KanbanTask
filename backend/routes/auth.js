const express = require("express")
const bcrypt = require("bcryptjs")
const jwt = require("jsonwebtoken")
const { body, validationResult } = require("express-validator")
const User = require("../models/User")
const auth = require("../middleware/auth")

const router = express.Router()

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
router.post(
  "/register",
  [
    body("name").trim().isLength({ min: 2, max: 50 }).withMessage("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤"),
    body("email").isEmail().normalizeEmail().withMessage("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email"),
    body("password").isLength({ min: 6 }).withMessage("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"),
  ],
  async (req, res) => {
    try {
      const errors = validationResult(req)
      if (!errors.isEmpty()) {
        return res.status(400).json({
          message: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
          errors: errors.array(),
        })
      }

      const { name, email, password } = req.body

      console.log("üìù Registration attempt for:", email)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const existingUser = await User.findOne({ email })
      if (existingUser) {
        console.log("‚ùå User already exists:", email)
        return res.status(400).json({
          message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
        })
      }

      // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
      const saltRounds = 12
      const passwordHash = await bcrypt.hash(password, saltRounds)

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = new User({
        name,
        email,
        passwordHash,
      })

      await user.save()
      console.log("‚úÖ User created:", email)

      // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
      const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, {
        expiresIn: process.env.JWT_EXPIRES_IN || "7d",
      })

      res.status(201).json({
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
        token,
        user: {
          _id: user._id,
          name: user.name,
          email: user.email,
        },
      })
    } catch (error) {
      console.error("Registration error:", error)
      res.status(500).json({
        message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
        error: error.message,
      })
    }
  },
)

// –í—Ö–æ–¥
router.post(
  "/login",
  [
    body("email").isEmail().normalizeEmail().withMessage("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email"),
    body("password").exists().withMessage("–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"),
  ],
  async (req, res) => {
    try {
      const errors = validationResult(req)
      if (!errors.isEmpty()) {
        return res.status(400).json({
          message: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
          errors: errors.array(),
        })
      }

      const { email, password } = req.body

      console.log("üîê Login attempt for:", email)
      console.log("üîç Login data - Email:", email, "Password length:", password.length)

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.findOne({ email })
      if (!user) {
        console.log("‚ùå User not found:", email)
        return res.status(401).json({
          message: "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
        })
      }

      console.log("‚úÖ User found:", email)
      console.log("üîç User active status:", user.isActive)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (!user.isActive) {
        console.log("‚ùå User is not active:", email)
        return res.status(401).json({
          message: "–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
        })
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
      console.log("üîç Comparing password for user:", email)
      console.log("üîç Input password length:", password.length)
      console.log("üîç Stored hash length:", user.passwordHash.length)

      const isPasswordValid = await bcrypt.compare(password, user.passwordHash)
      console.log("üîç Password match result:", isPasswordValid)

      if (!isPasswordValid) {
        console.log("‚ùå Invalid password for user:", email)
        return res.status(401).json({
          message: "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
        })
      }

      console.log("‚úÖ Password valid for user:", email)

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
      user.lastLoginAt = new Date()
      await user.save()

      // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
      const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, {
        expiresIn: process.env.JWT_EXPIRES_IN || "7d",
      })

      console.log("‚úÖ Login successful for user:", email)

      res.json({
        message: "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ",
        token,
        user: {
          _id: user._id,
          name: user.name,
          email: user.email,
        },
      })
    } catch (error) {
      console.error("Login error:", error)
      res.status(500).json({
        message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ",
        error: error.message,
      })
    }
  },
)

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get("/me", auth, async (req, res) => {
  try {
    console.log("üîç Getting current user:", req.user._id)

    const user = await User.findById(req.user._id).select("-passwordHash")
    if (!user) {
      console.log("‚ùå User not found in /me:", req.user._id)
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" })
    }

    console.log("‚úÖ Current user found:", user.email)

    res.json({
      _id: user._id,
      name: user.name,
      email: user.email,
      avatar: user.avatar,
      createdAt: user.createdAt,
    })
  } catch (error) {
    console.error("Get current user error:", error)
    res.status(500).json({
      message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      error: error.message,
    })
  }
})

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
router.put(
  "/profile",
  auth,
  [
    body("name").optional().trim().isLength({ min: 2, max: 50 }).withMessage("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤"),
    body("email").optional().isEmail().normalizeEmail().withMessage("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email"),
  ],
  async (req, res) => {
    try {
      const errors = validationResult(req)
      if (!errors.isEmpty()) {
        return res.status(400).json({
          message: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
          errors: errors.array(),
        })
      }

      const { name, email } = req.body
      const updates = {}

      if (name) updates.name = name
      if (email) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ email
        const existingUser = await User.findOne({ email, _id: { $ne: req.user._id } })
        if (existingUser) {
          return res.status(400).json({
            message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
          })
        }
        updates.email = email
      }

      const user = await User.findByIdAndUpdate(req.user._id, updates, { new: true }).select("-passwordHash")

      res.json({
        message: "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
        user: {
          _id: user._id,
          name: user.name,
          email: user.email,
          avatar: user.avatar,
        },
      })
    } catch (error) {
      console.error("Update profile error:", error)
      res.status(500).json({
        message: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è",
        error: error.message,
      })
    }
  },
)

// –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
router.put(
  "/change-password",
  auth,
  [
    body("currentPassword").exists().withMessage("–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"),
    body("newPassword").isLength({ min: 6 }).withMessage("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"),
  ],
  async (req, res) => {
    try {
      const errors = validationResult(req)
      if (!errors.isEmpty()) {
        return res.status(400).json({
          message: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
          errors: errors.array(),
        })
      }

      const { currentPassword, newPassword } = req.body

      const user = await User.findById(req.user._id)
      if (!user) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" })
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
      const isCurrentPasswordValid = await bcrypt.compare(currentPassword, user.passwordHash)
      if (!isCurrentPasswordValid) {
        return res.status(400).json({
          message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å",
        })
      }

      // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
      const saltRounds = 12
      const newPasswordHash = await bcrypt.hash(newPassword, saltRounds)

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
      user.passwordHash = newPasswordHash
      await user.save()

      res.json({
        message: "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω",
      })
    } catch (error) {
      console.error("Change password error:", error)
      res.status(500).json({
        message: "–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è",
        error: error.message,
      })
    }
  },
)

module.exports = router
