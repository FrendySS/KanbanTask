const express = require("express")
const bcrypt = require("bcryptjs")
const User = require("../models/User")
const auth = require("../middleware/auth")

const router = express.Router()

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.put("/profile", auth, async (req, res) => {
  try {
    const { name, email } = req.body
    const userId = req.user.id

    console.log(`üìù Updating profile for user: ${userId}`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ email –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if (email !== req.user.email) {
      const existingUser = await User.findOne({ email, _id: { $ne: userId } })
      if (existingUser) {
        return res.status(400).json({ message: "Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º" })
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await User.findByIdAndUpdate(
      userId,
      { name, email },
      { new: true, runValidators: true },
    ).select("-passwordHash")

    if (!updatedUser) {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" })
    }

    console.log(`‚úÖ Profile updated for user: ${updatedUser.email}`)
    res.json(updatedUser)
  } catch (error) {
    console.error("‚ùå Error updating profile:", error)
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" })
  }
})

// –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
router.put("/password", auth, async (req, res) => {
  try {
    const { currentPassword, newPassword } = req.body
    const userId = req.user.id

    console.log(`üîê Changing password for user: ${userId}`)

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!currentPassword || !newPassword) {
      return res.status(400).json({ message: "–¢–µ–∫—É—â–∏–π –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" })
    }

    if (newPassword.length < 6) {
      return res.status(400).json({ message: "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤" })
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findById(userId)
    if (!user) {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" })
    }

    console.log(`üîç Found user: ${user.email}`)
    console.log(`üîç Current password provided: ${currentPassword}`)
    console.log(`üîç Stored hash exists: ${!!user.passwordHash}`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ –º–æ–¥–µ–ª–∏
    const isCurrentPasswordValid = await user.comparePassword(currentPassword)
    if (!isCurrentPasswordValid) {
      console.log(`‚ùå Current password invalid for user: ${user.email}`)
      return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å" })
    }

    console.log(`‚úÖ Current password valid for user: ${user.email}`)

    // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    const saltRounds = 12
    const hashedNewPassword = await bcrypt.hash(newPassword, saltRounds)

    console.log(`üîê New password hashed for user: ${user.email}`)

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
    await User.findByIdAndUpdate(userId, { passwordHash: hashedNewPassword })

    console.log(`‚úÖ Password changed successfully for user: ${user.email}`)
    res.json({ message: "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω" })
  } catch (error) {
    console.error("‚ùå Error changing password:", error)
    res.status(500).json({
      message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      error: process.env.NODE_ENV === "development" ? error.message : undefined,
    })
  }
})

// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
router.get("/search", auth, async (req, res) => {
  try {
    const { q } = req.query

    if (!q || q.length < 2) {
      return res.json([])
    }

    console.log(`üîç Searching users with query: ${q}`)

    const users = await User.find({
      $or: [{ name: { $regex: q, $options: "i" } }, { email: { $regex: q, $options: "i" } }],
      _id: { $ne: req.user.id }, // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    })
      .select("name email")
      .limit(10)

    console.log(`‚úÖ Found ${users.length} users`)
    res.json(users)
  } catch (error) {
    console.error("‚ùå Error searching users:", error)
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" })
  }
})

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
router.get("/:id", auth, async (req, res) => {
  try {
    const user = await User.findById(req.params.id).select("name email avatar createdAt")

    if (!user) {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" })
    }

    res.json(user)
  } catch (error) {
    console.error("Get user error:", error)
    res.status(500).json({
      message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      error: error.message,
    })
  }
})

module.exports = router
