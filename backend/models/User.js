const mongoose = require("mongoose")
const bcrypt = require("bcryptjs")

const userSchema = new mongoose.Schema(
  {
    name: {
      type: String,
      required: true,
      trim: true,
      maxlength: 50,
    },
    email: {
      type: String,
      required: true,
      unique: true,
      lowercase: true,
      trim: true,
    },
    passwordHash: {
      type: String,
      required: true,
      minlength: 6,
    },
    avatar: {
      type: String,
      default: null,
    },
    isActive: {
      type: Boolean,
      default: true,
    },
  },
  {
    timestamps: true,
  },
)

// –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
userSchema.pre("save", async function (next) {
  // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –∏–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  if (!this.isModified("passwordHash")) return next()

  try {
    console.log("üîê Hashing password for user:", this.email)
    const salt = await bcrypt.genSalt(12)
    this.passwordHash = await bcrypt.hash(this.passwordHash, salt)
    console.log("‚úÖ Password hashed successfully")
    next()
  } catch (error) {
    console.error("‚ùå Password hashing error:", error)
    next(error)
  }
})

// –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
userSchema.methods.comparePassword = async function (password) {
  try {
    console.log("üîç Comparing password for user:", this.email)
    console.log("üîç Input password:", password)
    console.log("üîç Input password length:", password.length)
    console.log("üîç Stored hash length:", this.passwordHash.length)
    console.log("üîç Stored hash preview:", this.passwordHash.substring(0, 20) + "...")

    const isMatch = await bcrypt.compare(password, this.passwordHash)
    console.log("üîç Password match result:", isMatch)

    return isMatch
  } catch (error) {
    console.error("‚ùå Password comparison error:", error)
    return false
  }
}

// –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
userSchema.methods.toPublicJSON = function () {
  return {
    _id: this._id,
    name: this.name,
    email: this.email,
    avatar: this.avatar,
    createdAt: this.createdAt,
  }
}

module.exports = mongoose.model("User", userSchema)
